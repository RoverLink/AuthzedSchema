schema: |-
  /**
   * user represents a user that can be granted role(s)
   */
  definition user {}

  /**
   * anonymous_user represents any user who has not been authenticated
   */
  definition anonymous_user {}

  definition platform {
      relation member: user
  	relation administrator: user
  	permission super_admin = administrator
  }

  definition organization {
      relation member: user
      relation platform: platform

      // Almost certainly an oversimplification
      permission admin = platform->super_admin
      permission create_group = member
  }

  definition group {
      relation platform: platform
      relation organization: organization

      // Direct roles on the group
      relation owner: user | group#member
      relation manager: user | group#member
      relation direct_member: user | group#member

      // Users can be banned from the group    
      relation banned: user
      permission can_be_banned = (organization->member + platform->member) - owner

      // Synthetic relationship because we can't use the + operator in relations
      permission member = owner + (manager + direct_member - banned)

      // Dynamically determine who is allowed to search for the group
      relation searchers: organization#member | user:* | anonymous_user:*
      permission view_in_search = organization->admin + owner + (member + searchers - banned)

      // Dynamically determine who is allowed to join or ask to join the group
      relation joiners: organization#member | platform#member
      relation askers: organization#member | platform#member
      relation invited: user
      relation pending: user
      permission ask_to_join = askers - join - member - pending - banned
      permission join = (invited + joiners) - member - banned

      // Dynamically determine who is allowed to view posts
      relation viewers: group#manager | group#member | organization#member | user:* | anonymous_user:*
      permission view_posts = organization->admin + owner + (viewers - banned)

      // Dynamically determine the group's moderation policy
      relation post_without_moderation: user:* | group#member
      relation content_moderators: group#manager | group#member | custom_role#member
      relation metadata_moderators: group#manager | group#member | custom_role#member
      permission moderate_content = organization->admin + owner + (content_moderators - banned)
      permission moderate_metadata = organization->admin + owner + (metadata_moderators - banned)

      // Dynamically determine who is allowed to post in the group
      relation prevent_post: user:*
      relation posters: group#manager | group#member | organization#member | user:*
      permission post = owner->admin + owner + ((posters & post_without_moderation) - prevent_post - banned)
      permission post_for_moderation = organization->admin + owner + (posters - prevent_post - banned)

      // Dynamically determine who is allowed to edit pages for the group
      relation page_editors: group#manager | group#member | organization#member | custom_role#member
      permission edit_pages = organization->admin + owner + (page_editors - banned)

      // Dynamically determine who is allowed to view the members of the group
      relation members_viewers: group#manager | group#member | organization#member | custom_role#member
      permission view_members = organization->admin + owner + (members_viewers - banned)

      // Manage group membership and ownership
      permission add_member = organization->admin + owner + (manager - banned)
      permission remove_member = add_member

      // Manage announcements
      permission add_announcement = organization->admin + owner + (manager - banned)
      permission remove_announcement = add_announcement

      relation commenters: group#manager | group#member | organization#member | custom_role#member | user:*
      permission add_comments = organization->admin + owner + (commenters - banned)
      permission remove_comments = moderate_content

      // Manage group management
      permission add_manager = organization->admin + owner
      permission remove_manager = add_manager
      permission add_owner = organization->admin + owner
      permission remove_owner = organization->admin + add_owner
      permission ban_user = organization->admin + owner + (manager - banned)
      permission unban_user = ban_user

      // Manage group custom roles
      relation custom_role_manager: group#manager | custom_role#member
      permission manage_custom_role = organization->admin + owner + (custom_role_manager - banned)
  }

  definition custom_role {
      relation parent: group
      relation member: user | group#member

      permission add_member = parent->manage_custom_role
      permission remove_member = parent->manage_custom_role
      permission delete = parent->manage_custom_role
      permission edit = parent->manage_custom_role
  }
relationships: |-
  group:test#organization@organization:authzed
  organization:authzed#member@user:jake
  organization:authzed#member@user:jimmy
  organization:authzed#member@user:melissa
  organization:authzed#member@user:joey
  organization:authzed#member@user:blackhat
  group:test#owner@user:jake
  group:test#manager@user:joey
  group:test#manager@group:security#member
  group:test#invited@user:melissa
  group:test#banned@user:blackhat
  group:security#owner@user:jimmy

  // Write this rel to allow any org member to search for the group
  group:test#searchers@organization:authzed#member

  // Write this rel to allow any users in the org to ask to join
  group:test#askers@organization:authzed#member

  // Write this rel to allow any users in the org join without asking
  group:test#joiners@organization:authzed#member

  // Write this rel to allow allow org membes to read conversations
  group:test#viewers@organization:authzed#member

  // Write this rel to allow any registered user to post in a group
  group:test#posters@user:*

  // Write this rel to control group moderation
  group:test#post_without_moderation@group:test#member

  // Write this rel to allow any anonymous user to post in a group
  // Write this rel to allow a group's manager to view members of the group
  group:test#members_viewers@group:test#manager
  organization:authzed#member@user:michael
  organization:authzed#platform@platform:jalexsocial
  platform:jalexsocial#administrator@user:michael
  platform:jalexsocial#member@user:jenny
  group:test#joiners@platform:jalexsocial#member
  group:test#viewers@user:*
  // partial relationship: {"resourceType":"","resourceId":"","relation":"","subjectType":"","subjectId":"","subjectRelation":"","caveatName":"","caveatContext":""}
assertions:
  assertTrue:
    - group:test#join@user:michael
    - group:test#ban_user@user:michael
    - group:test#joiners@user:jenny
    - group:test#view_posts@user:jenny8675309
  assertFalse:
    - group:test#ban_user@user:carmichael
    - group:test#joiners@user:kevin
validation:
  group:test#add_manager:
    - "[user:jake] is <group:test#owner>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#add_member:
    - "[group:security#member] is <group:test#manager>"
    - "[user:jake] is <group:test#owner>"
    - "[user:jimmy] is <group:security#owner>"
    - "[user:joey] is <group:test#manager>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#add_owner:
    - "[user:jake] is <group:test#owner>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#ask_to_join: []
  group:test#ban_user:
    - "[group:security#member] is <group:test#manager>"
    - "[user:jake] is <group:test#owner>"
    - "[user:jimmy] is <group:security#owner>"
    - "[user:joey] is <group:test#manager>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#join:
    - "[organization:authzed#member] is <group:test#joiners>"
    - "[platform:jalexsocial#member] is <group:test#joiners>"
    - "[user:jenny] is <platform:jalexsocial#member>"
    - "[user:melissa] is <group:test#invited>/<organization:authzed#member>"
    - "[user:michael] is <organization:authzed#member>"
  group:test#post:
    - "[user:jake] is <group:test#owner>"
    - "[user:jimmy] is <group:security#owner>"
    - "[user:joey] is <group:test#manager>"
  group:test#post_for_moderation:
    - "[user:* - {user:blackhat}] is <group:test#posters>"
    - "[user:jake] is <group:test#owner>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#remove_manager:
    - "[user:jake] is <group:test#owner>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#remove_member:
    - "[group:security#member] is <group:test#manager>"
    - "[user:jake] is <group:test#owner>"
    - "[user:jimmy] is <group:security#owner>"
    - "[user:joey] is <group:test#manager>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#remove_owner:
    - "[user:jake] is <group:test#owner>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#unban_user:
    - "[group:security#member] is <group:test#manager>"
    - "[user:jake] is <group:test#owner>"
    - "[user:jimmy] is <group:security#owner>"
    - "[user:joey] is <group:test#manager>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
  group:test#view_in_search:
    - "[group:security#member] is <group:test#manager>"
    - "[organization:authzed#member] is <group:test#searchers>"
    - "[user:jake] is <group:test#owner>/<organization:authzed#member>"
    - "[user:jimmy] is <group:security#owner>/<organization:authzed#member>"
    - "[user:joey] is <group:test#manager>/<organization:authzed#member>"
    - "[user:melissa] is <organization:authzed#member>"
    - "[user:michael] is <organization:authzed#member>/<platform:jalexsocial#administrator>"
  group:test#view_members:
    - "[group:security#member] is <group:test#manager>"
    - "[group:test#manager] is <group:test#members_viewers>"
    - "[user:jake] is <group:test#owner>"
    - "[user:jimmy] is <group:security#owner>"
    - "[user:joey] is <group:test#manager>"
    - "[user:michael] is <platform:jalexsocial#administrator>"
